
# ===================================================================
# Common Flowable Spring Boot Properties
#
# This sample file is provided as a guideline. Do NOT copy it in its
# entirety to your own application.	           ^^^
# ===================================================================

# Core (Process) FlowableProperties

# Whether process definitions need to be auto deployed.
flowable.check-process-definitions=true
# In some situations you want to set the schema to use for table checks / generation if the database metadata doesn't return that correctly.
flowable.database-schema=
# The strategy that should be used for the database schema.
flowable.database-schema-update=true
# Whether db history should be used.
flowable.db-history-used=true 
# The name of the auto deployment.
flowable.deployment-name=SpringBootAutoDeployment
# The history level that needs to be used.
flowable.history-level=full
# The folder in which processes need to be searched for auto deployment.
flowable.process-definition-location-prefix=classpath*:/processes/
# The suffixes (extensions) of the files that needs to be deployed from the 'processDefinitionLocationPrefix' location.
flowable.process-definition-location-suffixes=**.bpmn20.xml,**.bpmn

# Process FlowableProcessProperties

# The maximum amount of process definitions available in the process definition cache. Per default it is 1 (all process definitions).
flowable.process.definition-cache-limit=-1
# Enables extra checks on the BPMN xml that is parsed. See https://www.flowable.org/docs/userguide/index.html#advanced.safe.bpmn.xml. Unfortunately, this feature is not available on some platforms (JDK 6, JBoss), hence you need to disable if your platform does not allow the use of StaxSource during XML parsing.
flowable.process.enable-safe-xml=true
# Load on startup of the Process dispatcher servlet.
flowable.process.servlet.load-on-startup=-1
# The name of the Process servlet.
flowable.process.servlet.name=Flowable BPMN Rest API
# The context path for the Process rest servlet.
flowable.process.servlet.path=/process-api

# Process Async Executor
# Whether the async executor should be activated.
flowable.process.async-executor-activate=true
# The amount of time (in milliseconds) an async job is locked when acquired by the async executor. During this period of time, no other async executor will try to acquire and lock this job.
#flowable.process.async.executor.async-job-lock-time-in-millis=300000
# The time (in milliseconds) the async job acquisition thread will wait to execute the next acquirement query. This happens when no new async jobs were found or when less async jobs have been fetched. Default value = 10 seconds.
#flowable.process.async.executor.default-async-job-acquire-wait-time-in-millis=10000
# The time (in milliseconds) the async job (both timer and async continuations) acquisition thread will wait when the queue is full to execute the next query. By default set to 0 (for backwards compatibility)
#flowable.process.async.executor.default-queue-size-full-wait-time-in-millis=0
# The time (in milliseconds) the timer job acquisition thread will wait to execute the next acquirement query. This happens when no new timer jobs were found or when less async jobs have been fetched. Default value = 10 seconds.
#flowable.process.async.executor.default-timer-job-acquire-wait-time-in-millis=1000
#flowable.process.async.executor.max-async-jobs-due-per-acquisition=1
#flowable.process.async.executor.retry-wait-time-in-millis=500
# The amount of time (in milliseconds) a timer job is locked when acquired by the async executor. During this period of time, no other async executor will try to acquire and lock this job.
#flowable.process.async.executor.timer-lock-time-in-millis=300000


# Actuator
# Maximum time that a response can be cached.
#management.endpoint.flowable.cache.time-to-live=0ms
# Whether to enable the flowable endpoint.
management.endpoint.flowable.enabled=true